
"""
urlgen takes an output log of powersort.py and extracts all the web image paths
and converts the paths into a web URL and an export file appropriate for 
import into Symbiota using the URL Mapping profile.

"""

import csv
import argparse
import re
import os.path
from urllib.parse import urljoin
from pathlib import Path

FILE_BASE_PATH = '/corral-repl/projects/TORCH/web/'
URL_BASE = 'https://web.corral.tacc.utexas.edu/torch/'
THUMB_EXT = '_tn'
#THUMB_EXT = '_thumb'
MEDIUM_EXT = '_med'

# set up argument parser
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--input", required=True, \
    help="Path to the input log file generated by powersort.py.")
ap.add_argument("-p", "--prefix", required=True, \
    help="File prefix used in catalog number (e.g. BRIT)")
ap.add_argument("-v", "--verbose", action="store_true", \
    help="Detailed output.")
args = vars(ap.parse_args())

input_file = args["input"]
file_prefix = args["prefix"]

def generate_url(file_base_path=FILE_BASE_PATH, file_path=None, url_base=URL_BASE):
    """
    """
    common_path = os.path.commonpath([file_base_path, file_path])
    relative_path = os.path.relpath(file_path, start=common_path)
    image_url = urljoin(URL_BASE, relative_path)
    return image_url

#attern_string = file_prefix + '(\d*)'
pattern_string = '(' + file_prefix + '\d+)'
catalog_number_pattern = re.compile(pattern_string)

occurrence_set = {}
with open(input_file, newline='') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        file_path = row['destination']
        file_type = row['filetype']
        result_status = row['result']
        # check if file successfully moved
        if result_status == 'success':
            # check if JPG
            # TODO check if filetype is web
            #if file_path.upper().endswith('JPG'):
            if file_type == 'web':
                # get filename parts
                file_path_obj = Path(file_path)
                basename = file_path_obj.name
                file_name = file_path_obj.stem
                file_extension = file_path_obj.suffix
                try:
                    catalog_number = catalog_number_pattern.match(file_name).group(0)
                    # Create catalog number record if it doesn't exist
                    if catalog_number not in occurrence_set:
                        occurrence_set[catalog_number]={'catalog_number': catalog_number}
                    # Determine if thumbnail, original, or web size
                    if file_name.endswith(THUMB_EXT):
                        occurrence_set[catalog_number]['thumbnail'] = generate_url(file_path=file_path)
                    elif file_name.endswith(MEDIUM_EXT):
                        occurrence_set[catalog_number]['web'] = generate_url(file_path=file_path)
                    else:
                        occurrence_set[catalog_number]['large'] = generate_url(file_path=file_path)
                except AttributeError:
                    print(f'No match for file_name {file_name} with prefix {file_prefix}')

# Get input file name
input_file_name_stem = Path(input_file).stem
output_file_name = input_file_name_stem + '_urls.csv'
print('Writing urls to:', output_file_name)

with open(output_file_name, 'w', newline='') as csvfile:
    fieldnames=['catalog_number', 'large', 'web', 'thumbnail']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    for key, image_set in occurrence_set.items():
        writer.writerow(image_set)

