
"""
urlgen takes an output log of powersort.py and extracts all the web image paths
and converts the paths into a web URL and an export file appropriate for 
import into Symbiota using the URL Mapping profile.

"""

import csv
import argparse
import re
import os.path
from urllib.parse import urljoin
from pathlib import Path

FILE_BASE_PATH = '/corral-repl/projects/TORCH/web/'
URL_BASE = 'https://web.corral.tacc.utexas.edu/torch/'
FILE_PREFIX = 'BRIT'
THUMB_EXT = '_thumb'
MEDIUM_EXT = '_med'

# set up argument parser
ap = argparse.ArgumentParser()
ap.add_argument("-i", "--input", required=True, \
    help="Path to the input log file generated by powersort.py.")
ap.add_argument("-v", "--verbose", action="store_true", \
    help="Detailed output.")
args = vars(ap.parse_args())

"""
config = configparser.ConfigParser()
config_file = args["config"]
config.read(config_file)
"""
input_file = args["input"]


def generate_url(file_base_path=FILE_BASE_PATH, file_path=None, url_base=URL_BASE):
    """
    """
    common_path = os.path.commonpath([file_base_path, file_path])
    relative_path = os.path.relpath(file_path, start=common_path)
    image_url = urljoin(URL_BASE, relative_path)
    return image_url


# /corral-repl/projects/TORCH/web/TEST/BRIT0001000/BRIT1280.JPG
# sample file path
#image_path = '/corral-repl/projects/TORCH/web/TEST/BRIT0001000/BRIT1385.JPG'
#print(generate_url(file_path=image_path))

pattern_string = FILE_PREFIX + '(\d*)'
catalog_number_pattern = re.compile(pattern_string)

occurrence_set = {}
with open(input_file, newline='') as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        file_path =  row['destination']
        result_status = row['result']
        # check if file successfully moved
        if result_status == 'success':
            # check if JPG
            if file_path.upper().endswith('JPG'):
                #get filename parts
                file_path_obj = Path(file_path)
                basename = file_path_obj.name
                file_name = file_path_obj.stem
                file_extension = file_path_obj.suffix
                catalog_number = catalog_number_pattern.match(file_name).group(0)
                # Create catalog number record if it doesn't exist
                if catalog_number not in occurrence_set:
                    occurrence_set[catalog_number]={'catalog_number': catalog_number}
                #print(catalog_number_match, generate_url(file_path=row['destination']))
                # Determine it thumbnail, original, or web size
                if file_name.endswith(THUMB_EXT):
                    #print('Thumb:', file_name)
                    occurrence_set[catalog_number]['thumbnail'] = generate_url(file_path=file_path)
                elif file_name.endswith(MEDIUM_EXT):
                    #print('Medium:', file_name)
                    occurrence_set[catalog_number]['web'] = generate_url(file_path=file_path)
                else:
                    #print('Large:', file_name)
                    occurrence_set[catalog_number]['large'] = generate_url(file_path=file_path)


# Get input file name
input_file_name_stem = Path(input_file).stem
output_file_name = input_file_name_stem + '_urls.csv'
print('Writing urls to:', output_file_name)

with open(output_file_name, 'w', newline='') as csvfile:
    fieldnames=['catalog_number', 'large', 'web', 'thumbnail']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
    writer.writeheader()
    for key, image_set in occurrence_set.items():
        writer.writerow(image_set)

